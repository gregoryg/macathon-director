# Set the following values you want to customize for the client command, for example:
## Set Owner tag to your email/user - defaults to shell user
OWNER_TAG=gregoryg
SSH_USERNAME=gregj
CM_ADMIN_USER=admin
CM_ADMIN_PASS=admin
INSTANCE_PREFIX=gg

# Environment (cloud platform login), Deployment (CM), and cluster name
environmentName=galactic-federation
deploymentName=council
name=birdperson

# Uncomment the cloud provider section containing your auth credentials
# include file("../providers/azure-provider.conf")
include file("../providers/google-provider.conf")
# include file("../providers/aws-provider.conf")

ssh {
    # privateKey="-----BEGIN RSA PRIVATE KEY-----"
    privateKey=${HOME}/.ssh/google_compute_engine
    username=${SSH_USERNAME}
}

# Uncomment the correct cloud provider instance defaults
# include file("azure-instance-defaults.conf")
# include file("aws-instance-defaults.conf")
include file("gcp-instance-defaults.conf")

# include file("kerberos.conf")

cloudera-manager {
    username=${CM_ADMIN_USER}
    password=${CM_ADMIN_PASS}
    configs {
      CLOUDERA_MANAGER {
        custom_banner_html="Phoenixperson? I thought we settled on Cyberbird"
      }
    }
    instance = ${instance-defaults} {
    # instance {
        instanceNamePrefix=${INSTANCE_PREFIX}-cm
    }
    databaseTemplates {
      CLOUDERA_MANAGER {
        name=cmtemplate
        databaseServerName=mysqlmeta
        databaseNamePrefix=scm
      }
      ACTIVITYMONITOR {
        name=amontemplate
        databaseServerName=mysqlmeta
        databaseNamePrefix=amon
      }
      TELEMETRYPUBLISHER {
        name=tpubtemplate
        databaseServerName=mysqlmeta
        databaseNamePrefix=tpub
      }
      REPORTSMANAGER {
        name=rmantemplate
        databaseServerName=mysqlmeta
        databaseNamePrefix=rman
      }
      NAVIGATOR {
        name=navtemplate
        databaseServerName=mysqlmeta
        databaseNamePrefix=nav
      }
      NAVIGATORMETASERVER {
        name=navmetatemplate
        databaseServerName=mysqlmeta
        databaseNamePrefix=navmeta
      }
    }
    csds=["https://archive.cloudera.com/cdsw1/1.4.3/csd/CLOUDERA_DATA_SCIENCE_WORKBENCH-CDH5-1.4.3.jar"]
    repository="https://archive.cloudera.com/cm6/6.1.0/redhat7/yum/"
    enableEnterpriseTrial=true
    # unlimitedJce=true
    tlsEnabled=false
}



cluster {
    parcelRepositories=[
    "https://archive.cloudera.com/cdsw1/1.4.3/parcels/"
    "https://archive.cloudera.com/cdh6/6.1.0/parcels/"
    ]

    configs {
    HDFS {
        dfs_replication=1
        dfs_block_local_path_access_user="impala,hbase,mapred,spark"
        # core_site_safety_valve: """
        #     <property>
        #         <name>fs.s3a.access.key</name>
        #         <value>"""${AWS_ACCESS_KEY_ID}"""</value>
        #     </property>
        #     <property>
        #         <name>fs.s3a.secret.key</name>
        #         <value>"""${AWS_SECRET_ACCESS_KEY}"""</value>
        #     </property>
        # """
      }
    HUE {
      hue_service_safety_valve="""[notebook]
show_notebooks=true"""
      }
    CDSW {
       "cdsw.domain.config"="cdsw.internal" # The fully qualified domain name for the CDSW host - script will override this setting
       # "cdsw.master.ip.config"="10.128.0.5"
      }
    }
    redeployClientConfigsOnUpdate=false
    restartOnUpdate=false
    masters {
        count=1
        configs {
           HIVE {
                HIVESERVER2 {
                    hiveserver2_spark_executor_cores=4
                }
           }
        }
        minCount=1
        instance=${instance-defaults} {
            instanceNamePrefix=${INSTANCE_PREFIX}-master
            dataDiskSize=512
            dataDiskCount=4
        }
        roles {
            HIVE=[HIVEMETASTORE,HIVESERVER2]
            SOLR=[SOLR_SERVER]
            HDFS=[NAMENODE,SECONDARYNAMENODE,BALANCER]
            OOZIE=[OOZIE_SERVER]
            HUE=[HUE_SERVER]
            # "KS_INDEXER"=[
            #     "HBASE_INDEXER"
            # ]
            # HBASE=[
            #     MASTER
            # ]
            ZOOKEEPER=[SERVER]
            YARN=[RESOURCEMANAGER,JOBHISTORY]
            IMPALA=[CATALOGSERVER,STATESTORE]
            SPARK_ON_YARN=[SPARK_YARN_HISTORY_SERVER, GATEWAY]
        }
    }
    databaseTemplates {
        OOZIE {
            name=oozietemplate
            databaseServerName=mysqlmeta
            databaseNamePrefix=ooziedb
        }
        HIVE {
            name=hivetemplate
            databaseServerName=mysqlmeta
            databaseNamePrefix=hivedb
        }
        HUE {
            name=huetemplate
            databaseServerName=mysqlmeta
            databaseNamePrefix=huedb
        }
    }
    services=[
        CDSW
        HDFS
        HIVE
        HUE
        IMPALA
        OOZIE
        SOLR
        SPARK_ON_YARN
        YARN
        ZOOKEEPER
    ]
    products {
        CDH=6
        CDSW=1
    }
    preTerminateScripts=[]
    postCreateScripts=[]
    administrationSettings {
        autoRepairCooldownPeriodInSeconds=1800
        autoRepairEnabled=true
    }
    instancePostCreateScriptsPaths=["../bootstrap-scripts/cdsw-post.sh"]
    workers {
        count=1
        minCount=1
        configs {}
        instance=${instance-defaults} {
        # instance {
            instanceNamePrefix=${INSTANCE_PREFIX}-work
            dataDiskCount=4
            ebsVolumeCount=4 # AWS
            dataDiskType=SSD
            ebsVolumeType=st1 # AWS
            dataDiskSize=500
            dataDiskSizeGb=500 # for Google plugin
            ebsVolumeSizeGiB=500 # AWS
        }
        roles {
            HDFS=[DATANODE]
            # HBASE=[REGIONSERVER]
            YARN=[NODEMANAGER]
            IMPALA=[IMPALAD]
            SPARK_ON_YARN=[GATEWAY]
        }
    }
    zoo-workers {
        count=2
        configs {}
        minCount=3
        instance=${instance-defaults} {
        # instance {
            instanceNamePrefix=${INSTANCE_PREFIX}-zwork
            dataDiskCount=4
            ebsVolumeCount=4 # AWS
            dataDiskType=SSD
            ebsVolumeType=st1 # AWS
            dataDiskSize=500
            dataDiskSizeGb=500 # for Google plugin
            ebsVolumeSizeGiB=500 # AWS
        }
        roles {
            HDFS=[DATANODE]
            # HBASE=[REGIONSERVER]
            YARN=[NODEMANAGER]
            IMPALA=[IMPALAD]
            SPARK_ON_YARN=[GATEWAY]
            ZOOKEEPER=[SERVER]
        }
    }
    gateways {
        count=1
        configs {}
        minCount=1
        instance=${instance-defaults} {
        # TODO: use named types in instance-defaults e.g. ${instance-defaults}.gateway/versmall
        # type="m4.large" # AWS
        # type="STANDARD_DS12_V2" # Azure
        type="n1-standard-2" # Google
        instanceNamePrefix=${INSTANCE_PREFIX}-gw
        dataDiskCount=0
        ebsVolumeCount=0 # AWS
        }
        roles {
            HIVE=[GATEWAY]
            SOLR=[GATEWAY]
            HDFS=[GATEWAY]
            # HBASE=[GATEWAY]
            YARN=[GATEWAY]
            SPARK_ON_YARN=[GATEWAY]
        }
    }
    cdsw-master {
        count=1
        configs {
           CDSW {
              CDSW_DOCKER {
                 "cdsw.docker.devices.config"="/dev/sdc" # /dev/sd[ab] are taken by OS on Azure; use /dev/xvd[fg] for AWS
                }
            }
        }
        minCount=1
        instance=${instance-defaults} {
            # type="m4.4xlarge" # AWS
            # type="STANDARD_DS13_V2" # Azure
            type=n1-highmem-16 # GCP
            instanceNamePrefix=${INSTANCE_PREFIX}-cdswm
            dataDiskCount=2
            ebsVolumeCount=2 # AWS
            dataDiskType=SSD
            ebsVolumeType=gp2 # AWS
            dataDiskSize=500
            dataDiskSizeGb=500 # for Google plugin
            ebsVolumeSizeGiB=500 # AWS
            bootstrapScriptsPaths=["../bootstrap-scripts/cdsw-node-prep.sh"]
            normalizationConfig {
               mountAllUnmountedDisks=false
            }
          }
        roles {
            CDSW=[CDSW_MASTER, CDSW_APPLICATION, CDSW_DOCKER]
            HIVE=[GATEWAY]
            SOLR=[GATEWAY]
            HDFS=[GATEWAY]
            # HBASE=[GATEWAY]
            YARN=[GATEWAY]
            SPARK_ON_YARN=[GATEWAY]
        }
   }
}
databaseServers {
    mysqlmeta {
        host=${?HOSTNAME} # DB on same instance as Director
        user=cmdbadmin
        password=cmdbadmin
        type=MYSQL
        port=3306
        tags { owner=${OWNER_TAG} }
    }
}
